@page "/upcoming-events"
@using Models.Events
@inject NavigationManager Navigation
@inject Services.Interfaces.IEventService EventService

<h3 class="text-center mt-4">Upcoming Events</h3>

@if (events == null)
{
    <p class="text-center"><em>Loading...</em></p>
}
else if (!events.Any())
{
    <p class="text-center"><em>No upcoming events found.</em></p>
}
else
{
    <div class="container mt-4">
        <div class="row">
            @foreach (var evt in events)
            {
                <div class="col-md-4 mb-4">
                    <div class="card shadow-sm">
                        @if (!string.IsNullOrEmpty(evt.ImageUrl))
                        {
                            <img src="@evt.ImageUrl" class="card-img-top" alt="@evt.Title" />
                        }
                        <div class="card-body">
                            <h5 class="card-title">@evt.Title</h5>
                            <p class="card-text">@evt.Description</p>
                            <p class="card-text">
                                <small class="text-muted">
                                    @evt.StartDate.ToShortDateString() @evt.StartTime -
                                    @(evt.EndDate.HasValue ? evt.EndDate.Value.ToShortDateString() : "") @evt.EndTime
                                </small>
                            </p>
                            <p class="card-text">@evt.Location</p>
                            @if (evt.IsFree)
                            {
                                <p class="card-text text-success">Free</p>
                            }
                            else
                            {
                                <p class="card-text text-danger">@evt.Cost.ToString("C")</p>
                            }
                            <a href="@(evt.IsPhysical ? $"https://maps.google.com/?q={evt.Location}" : evt.AccessLink)" class="btn btn-primary" target="_blank">
                                More Info
                            </a>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}

@code {
    private List<Event> events;

    protected override async Task OnInitializedAsync()
    {
        var response = await EventService.GetUpcomingEventsAsync();
        if (response.Success)
        {
            events = response.Data as List<Event>;
        }
        else
        {
            Console.WriteLine(response.Message);
            events = new List<Event>(); // Initialize as empty list to show no events found message
        }
    }
}
