@page "/"
@page "/login"
@using Models.Auth

@layout Layout.AuthLayout
@inject NavigationManager Navigation
@inject Services.Interfaces.IAuthService AuthService
@inject IJSRuntime JSRuntime

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}
<div class="card-header">
    <h3>Login</h3>

</div>
<div class="card-body">
    <EditForm Model="@loginRequest" OnValidSubmit="@HandleLogin">
        <DataAnnotationsValidator />

        <div class="form-group">
            <label for="email">Email:</label>
            <InputText id="email" class="form-control" @bind-Value="@loginRequest.Email" />
            <ValidationMessage For="@(() => loginRequest.Email)" />
        </div>
        <div class="form-group">
            <label for="password">Password:</label>
            <InputText id="password" type="password" class="form-control" @bind-Value="@loginRequest.Password" />
            <ValidationMessage For="@(() => loginRequest.Password)" />
        </div>
        <div class="mt-3">
            <button type="submit" class="btn btn-primary btn-block" disabled="@isLoading">
                @if (isLoading)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    <span class="sr-only">Loading...</span>
                }
                else
                {
                    <span>Login</span>
                }
            </button>
            @*<button type="submit" class="btn btn-primary btn-block">Login</button>*@
        </div>
        <div class="mt-3">
            <p>Don't have an account? <NavLink href="/signup">Sign up here</NavLink></p>
        </div>
    </EditForm>
</div>


@code {
    private LoginRequest loginRequest = new LoginRequest();
    private string errorMessage;
    private bool isLoading;

    private async Task HandleLogin()
    {
        isLoading = true;

        var response = await AuthService.LoginAsync(loginRequest);
        if (response.Success)
        {
            Navigation.NavigateTo("/home");
        }
        else
        {
            errorMessage = response.Message;
            StateHasChanged();
        }
        isLoading = false;
    }
}